@use "sass:meta";
@use "sass:map";
@use "sass:string";

@use "./variables" as *;
@use "./spacings" as *;
@use "./functions" as *;

@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin img-cover() {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin img-auto-cover($percent: 56.25%) {
  position: relative;
  height: 0;
  padding-top: #{$percent};

  img {
    @include pos-center();
    @include img-cover();
  }
}

@mixin pos-full() {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

@mixin button($color-type) {
  color: clr(#{$color-type}-text);
  background-color: clr(#{$color-type}-main);

  &:hover {
    background-color: clr(#{$color-type}-hover);
  }
  &:focus {
    background-color: clr(#{$color-type}-focus);
  }

  &:disabled {
    background-color: clr(#{$color-type}-disabled);
  }
}

@mixin pos-center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin backdrop($opacity: 0.45) {
  &::before {
    content: "";
    @include overlay($opacity);
  }
}

@mixin overlay($opacity: 0.45) {
  @include pos-full();
  background-color: rgba(0, 0, 0, #{$opacity});
}

@mixin root-var($map) {
  @each $key, $value in $map {
    --#{$key}: #{$value};
  }
}

@mixin build-family($family) {
  @each $key, $value in $family {
    .no-family-#{$key} {
      font-family: var(--family-#{$key});
    }
  }
}

@mixin root-family($family) {
  @each $key, $value in $family {
    --family-#{$key}: #{$value}, sans-serif;
  }
}

@mixin line-clamp($lines: 2) {
  width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  word-break: keep-all;
  white-space: normal;
}

@mixin build-color($colors, $prefix: "") {
  @each $key, $value in $colors {
    $class: ".clr-#{$key}";
    $var: $key;

    @if (string.length($prefix) > 0) {
      $class: ".clr-#{$prefix}-#{$key}";
      $var: "#{$prefix}-#{$key}";
    }

    #{$class} {
      color: clr(#{$var});
    }
  }
}
@mixin build-background($colors, $prefix: "") {
  @each $key, $value in $colors {
    $class: ".bg-#{$key}";
    $var: $key;

    @if (string.length($prefix) > 0) {
      $class: ".bg-#{$prefix}-#{$key}";
      $var: "#{$prefix}-#{$key}";
    }

    #{$class} {
      background-color: clr(#{$var});
    }
  }
}

@mixin root-locale-families($font-families) {
  @each $locale, $family in $font-families {
    html[lang="#{$locale}"] {
      @if ($locale != $DEFAULT_LOCALE) {
        @include root-family($family);
      }
    }
  }
}

@mixin root-typo($typo) {
  $typo-var: flatten-map($typo);

  @each $key, $value in $typo-var {
    --#{$key}: #{$value};
  }
}

@mixin root-locale-typos($typo, $font-families) {
  @each $locale, $_ in $font-families {
    html[lang="#{$locale}"] {
      @if ($locale != $DEFAULT_LOCALE) {
        @include root-typo(map.get($typo, $locale));
      }
    }
  }
}

@mixin build-typo($typo) {
  @each $type, $data in $typo {
    @each $key, $value in $data {
      $name: #{$type}-#{$key};

      .no-#{$name} {
        font-family: var(--#{$name}-fm);
        font-size: var(--#{$name}-fs);
        font-weight: var(--#{$name}-fw);
        line-height: var(--#{$name}-lh);
        letter-spacing: var(--#{$name}-ls);
      }
    }
  }
}

@mixin build-typo-stack($typography) {
  @each $locale, $typo in $typography {
    @if ($locale == $DEFAULT_LOCALE) {
      @include build-typo($typo);
    } @else {
      html[lang="#{$locale}"] {
        @include build-typo($typo);
      }
    }
  }
}

@mixin mq($breakpoint) {
  @if (meta.type-of($breakpoint) == "number") {
    @media (max-width: #{$breakpoint}px) {
      @content;
    }
  } @else if (meta.type-of($breakpoint) == "string") {
    @if (map.has-key($breakpoints, $breakpoint)) {
      $point: map.get($breakpoints, $breakpoint);
      @media (max-width: #{$point}px) {
        @content;
      }
    } @else {
      @error "wrong breakpoint key: #{$breakpoint}";
    }
  } @else {
    @error "breakpoint type error";
  }

  @each $key, $value in $breakpoints {
  }
}

@mixin color-scheme($name) {
  @media (prefers-color-scheme: #{$name}) {
    @content;
  }
}

@mixin root-global($globals) {
  @each $breakpoint, $data in $globals {
    $var: flatten-map($data);

    @if ($breakpoint == base) {
      :root {
        @each $key, $value in $var {
          --#{$key}: #{$value};
        }
      }
    } @else {
      @if (map.has-key($breakpoints, $breakpoint)) {
        @include mq($breakpoint) {
          :root {
            @each $key, $value in $var {
              --#{$key}: #{$value};
            }
          }
        }
      }
    }
  }
}
