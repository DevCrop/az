@use "sass:map";
@use "../abstracts" as *;

$spacing-var: flatten-map($spacings);

$clr-var: flatten-map($colors, "clr");
$clr-var--invert: flatten-map($dark-colors, "clr-invert");
$clr-dark-var: flatten-map($dark-colors, "clr");
$clr-dark-var--invert: flatten-map($colors, "clr-invert");

$clr-pure: flatten-map($colors);
$clr-pure--invert: flatten-map($dark-colors);

// ----------------------------------------------------------------------------
// Spacing & Global Variables
// ----------------------------------------------------------------------------
:root {
  @include root-var($spacing-var);
}

@include root-global($globals);

// ----------------------------------------------------------------------------
// Colors
// ----------------------------------------------------------------------------
@include color-scheme(light) {
  :root {
    @include root-var($clr-var);
    @include root-var($clr-var--invert);
  }
}

@include color-scheme(dark) {
  :root {
    @include root-var($clr-dark-var);
    @include root-var($clr-dark-var--invert);
  }
}

:root {
  @include root-var($clr-var);
  @include root-var($clr-var--invert);
}

html[data-theme="light"] {
  @include root-var($clr-var);
  @include root-var($clr-var--invert);
}
html[data-theme="dark"] {
  @include root-var($clr-dark-var);
  @include root-var($clr-dark-var--invert);
}

@include build-color($clr-pure);
@include build-color($clr-pure--invert, "invert");
@include build-background($clr-pure);
@include build-background($clr-pure--invert, "invert");

// ----------------------------------------------------------------------------
// Font Family & Typogrpahy
// ----------------------------------------------------------------------------
:root {
  @include root-family(map.get($font-families, $DEFAULT_LOCALE));
  @include root-typo(map.get($typography, $DEFAULT_LOCALE));
}

@include root-locale-families($font-families);
@include root-locale-typos($typography, $font-families);

@include build-family(map.get($font-families, $DEFAULT_LOCALE));
@include build-typo(map.get($typography, $DEFAULT_LOCALE));

// ----------------------------------------------------------------------------
// Building Spacings
// ----------------------------------------------------------------------------
@each $key, $value in map.get($spacings, section) {
  $class: ".no-section-#{$key}";
  #{$class} {
    padding: #{$value} 0;
  }
  #{$class}--t {
    padding-top: #{$value};
  }
  #{$class}--b {
    padding-bottom: #{$value};
  }
}

@each $key, $value in map.get($spacings, gap) {
  .no-gap-#{$key} {
    gap: #{$value};
  }
  .no-gap-#{$key}--row {
    row-gap: #{$value};
  }
  .no-gap-#{$key}--col {
    column-gap: #{$value};
  }
}

@each $key, $value in map.get($spacings, pd) {
  $class: ".no-pd-#{$key}";
  #{$class} {
    padding: #{$value};
  }
  #{$class}--x {
    padding: 0 #{$value};
  }
  #{$class}--y {
    padding: #{$value} 0;
  }
  #{$class}--l {
    padding-left: #{$value};
  }
  #{$class}--t {
    padding-top: #{$value};
  }
  #{$class}--r {
    padding-right: #{$value};
  }
  #{$class}--b {
    padding-bottom: #{$value};
  }
}

@each $key, $value in map.get($spacings, mg) {
  $class: ".no-mg-#{$key}";
  #{$class} {
    margin: #{$value};
  }
  #{$class}--x {
    margin: 0 #{$value};
  }
  #{$class}--y {
    margin: #{$value} 0;
  }
  #{$class}--l {
    margin-left: #{$value};
  }
  #{$class}--t {
    margin-top: #{$value};
  }
  #{$class}--r {
    margin-right: #{$value};
  }
  #{$class}--b {
    margin-bottom: #{$value};
  }
}

@each $key, $value in map.get($spacings, radius) {
  $class: ".no-radius-#{$key}";

  #{$class} {
    border-radius: #{$value};
    overflow: hidden;
  }

  #{$class}--t,
  #{$class}--b,
  #{$class}--tr,
  #{$class}--rt,
  #{$class}--tl,
  #{$class}--lt,
  #{$class}--br,
  #{$class}--rb,
  #{$class}--bl,
  #{$class}--lb {
    overflow: hidden;
  }

  #{$class}--t {
    border-top-right-radius: #{$value};
    border-top-left-radius: #{$value};
  }

  #{$class}--b {
    border-bottom-right-radius: #{$value};
    border-bottom-left-radius: #{$value};
  }

  #{$class}--tr,
  #{$class}--rt {
    border-top-right-radius: #{$value};
  }

  #{$class}--tl,
  #{$class}--lt {
    border-top-left-radius: #{$value};
  }

  #{$class}--br,
  #{$class}--rb {
    border-bottom-right-radius: #{$value};
  }

  #{$class}--bl,
  #{$class}--lb {
    border-bottom-left-radius: #{$value};
  }
}

// ----------------------------------------------------------------------------
// Container
// ----------------------------------------------------------------------------
@each $key, $value in $breakpoints {
  $max-width: calc(var(--gutter-container) * 2 + #{$value}px);

  .no-container-#{$key} {
    max-width: #{$max-width};
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--gutter-container);
    padding-right: var(--gutter-container);
  }
}

// ----------------------------------------------------------------------------
// Grid System
// ----------------------------------------------------------------------------
.no-row {
  --gutter-x: var(--gutter-grid-x);
  --gutter-y: var(--gutter-grid-y);

  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--gutter-y));
  margin-right: calc(-0.5 * var(--gutter-x));
  margin-left: calc(-0.5 * var(--gutter-x));

  &.col {
    flex: 1 0 0;
  }

  @for $i from 1 through 12 {
    & .no-col-#{$i} {
      max-width: 100%;
      width: calc($i / 12 * 100%);
      flex: 0 0 auto;
      padding-right: calc(var(--gutter-x) * 0.5);
      padding-left: calc(var(--gutter-x) * 0.5);
      margin-top: var(--gutter-y);
    }

    @each $key, $value in $breakpoints {
      & .no-col-#{$key}-#{$i} {
        @include mq($key) {
          max-width: 100%;
          width: calc($i / 12 * 100%);
          flex: 0 0 auto;
          padding-right: calc(var(--gutter-x) * 0.5);
          padding-left: calc(var(--gutter-x) * 0.5);
          margin-top: var(--gutter-y);
        }
      }
    }
  }
}
